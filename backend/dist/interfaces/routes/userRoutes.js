"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRouter = void 0;
const express_1 = __importDefault(require("express"));
const userInjection_1 = require("../../infrastructure/config/dependencyInjection/userInjection");
const verifyToken_1 = require("../../infrastructure/middleware/verifyToken");
const errorHandler_1 = __importDefault(require("../../infrastructure/middleware/errorHandler"));
const userRoutes_1 = require("../../constant/userRoutes");
const router = express_1.default.Router();
exports.userRouter = router;
router.post(userRoutes_1.USER_ROUTES.AUTH.REGISTER, (req, res, next) => userInjection_1.auth.registerUser(req, res, next));
router.post(userRoutes_1.USER_ROUTES.AUTH.LOGIN, (req, res) => userInjection_1.auth.loginUser(req, res));
router.post(userRoutes_1.USER_ROUTES.AUTH.GOOGLE_LOGIN, (req, res) => userInjection_1.auth.googleLogin(req, res));
router.get(userRoutes_1.USER_ROUTES.AUTH.LOGOUT, (req, res) => userInjection_1.auth.logoutUser(req, res));
router.post(userRoutes_1.USER_ROUTES.AUTH.SEND_OTP, (req, res, next) => userInjection_1.authcontroller.sendOtp(req, res, next));
router.post(userRoutes_1.USER_ROUTES.AUTH.VERIFY_OTP, (req, res, next) => userInjection_1.authcontroller.verifyOtp(req, res, next));
router.post(userRoutes_1.USER_ROUTES.AUTH.RESET_PASSWORD, (req, res, next) => userInjection_1.authcontroller.resetPassword(req, res, next));
router.get(userRoutes_1.USER_ROUTES.DEPARTMENT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.department.fetchAllUnblockedDepartments(req, res, next));
router.get(userRoutes_1.USER_ROUTES.DOCTOR.LIST, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.doctor.fetchAllVerifiedDoctors(req, res, next));
router.get(userRoutes_1.USER_ROUTES.DOCTOR.SORT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.doctor.fetchSortedDoctors(req, res, next));
router.get(userRoutes_1.USER_ROUTES.DOCTOR.BY_ID(":id"), verifyToken_1.verifyToken, (req, res, next) => userInjection_1.doctor.fetchSingleDoctor(req, res, next));
router.patch(userRoutes_1.USER_ROUTES.DOCTOR.MESSAGE_TIME(":reciever"), verifyToken_1.verifyToken, (req, res, next) => userInjection_1.doctor.updatemessagetime(req, res, next));
router.get(userRoutes_1.USER_ROUTES.USER.PROFILE, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.user.fetchUserDetails(req, res, next));
router.post(userRoutes_1.USER_ROUTES.USER.PROFILE, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.user.updateUserDetails(req, res, next));
router.post(userRoutes_1.USER_ROUTES.PAYMENT.BOOK_APPOINTMENT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.payment.createOrder(req, res, next));
router.post(userRoutes_1.USER_ROUTES.PAYMENT.VERIFY_PAYMENT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.payment.verifyOrderPayment(req, res, next));
router.get(userRoutes_1.USER_ROUTES.MESSAGE.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.message.fetchMessages(req, res, next));
router.delete(userRoutes_1.USER_ROUTES.MESSAGE.BY_ID(":messageid"), verifyToken_1.verifyToken, (req, res, next) => userInjection_1.message.deleteMessage(req, res, next));
router.get(userRoutes_1.USER_ROUTES.MESSAGE.UNREAD_COUNT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.message.fetchUnreadMessageCount(req, res, next));
router.get(userRoutes_1.USER_ROUTES.DOCTOR.SLOT_BY_ID(":id"), verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.getDoctorSlotsByDate(req, res, next));
router.post(userRoutes_1.USER_ROUTES.APPOINTMENT.CREATE, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.bookAppointment(req, res, next));
router.get(userRoutes_1.USER_ROUTES.APPOINTMENT.FUTURE, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.fetchFutureAppointments(req, res, next));
router.post(userRoutes_1.USER_ROUTES.APPOINTMENT.LOCK_SLOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.createLockSlot(req, res, next));
router.get(userRoutes_1.USER_ROUTES.APPOINTMENT.PAGE, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.fetchAppointmentPages(req, res, next));
router.patch(userRoutes_1.USER_ROUTES.APPOINTMENT.CANCEL, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.cancelAppointment(req, res, next));
router.get(userRoutes_1.USER_ROUTES.APPOINTMENT.REPORT(":appId"), verifyToken_1.verifyToken, (req, res, next) => userInjection_1.appoinment.reportGet(req, res, next));
router.post(userRoutes_1.USER_ROUTES.REVIEW.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.review.submitReview(req, res, next));
router.get(userRoutes_1.USER_ROUTES.REVIEW.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.review.fetchDoctorReviews(req, res, next));
router.get(userRoutes_1.USER_ROUTES.REVIEW.COUNT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.review.fetchAverageRating(req, res, next));
router.get(userRoutes_1.USER_ROUTES.NOTIFICATION.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.notification.getUnreadNotification(req, res, next));
router.patch(userRoutes_1.USER_ROUTES.NOTIFICATION.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.notification.readAllNotification(req, res, next));
router.get(userRoutes_1.USER_ROUTES.WALLET.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.wallet.fetchUserWallet(req, res, next));
router.post(userRoutes_1.USER_ROUTES.WALLET.ROOT, verifyToken_1.verifyToken, (req, res, next) => userInjection_1.wallet.debitUserWallet(req, res, next));
router.use(errorHandler_1.default);
